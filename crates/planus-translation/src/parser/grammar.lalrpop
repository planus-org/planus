use planus_types::cst::*;
use planus_lexer::{LexicalError, Token, TokenWithMetadata, TokenMetadata, Symbol, Keyword};
use super::grammar_helper::*;
use crate::ctx::Ctx;
use codespan::FileId;

grammar<'input, 'ctx>(file_id: FileId, ctx: &'ctx Ctx);

extern {
  type Location = codespan::ByteIndex;
  type Error = LexicalError;

  enum TokenWithMetadata<'input> {
    "+" => TokenWithMetadata(Token::Symbol(Symbol::Plus), <TokenMetadata<'input>>),
    "-" => TokenWithMetadata(Token::Symbol(Symbol::Minus), <TokenMetadata<'input>>),
    ";" => TokenWithMetadata(Token::Symbol(Symbol::Semicolon), <TokenMetadata<'input>>),
    ":" => TokenWithMetadata(Token::Symbol(Symbol::Colon), <TokenMetadata<'input>>),
    "," => TokenWithMetadata(Token::Symbol(Symbol::Comma), <TokenMetadata<'input>>),
    "." => TokenWithMetadata(Token::Symbol(Symbol::Period), <TokenMetadata<'input>>),
    "=" => TokenWithMetadata(Token::Symbol(Symbol::Equals), <TokenMetadata<'input>>),
    "(" => TokenWithMetadata(Token::Symbol(Symbol::ParenOpen), <TokenMetadata<'input>>),
    ")" => TokenWithMetadata(Token::Symbol(Symbol::ParenClose), <TokenMetadata<'input>>),
    "{" => TokenWithMetadata(Token::Symbol(Symbol::BraceOpen), <TokenMetadata<'input>>),
    "}" => TokenWithMetadata(Token::Symbol(Symbol::BraceClose), <TokenMetadata<'input>>),
    "[" => TokenWithMetadata(Token::Symbol(Symbol::BracketOpen), <TokenMetadata<'input>>),
    "]" => TokenWithMetadata(Token::Symbol(Symbol::BracketClose), <TokenMetadata<'input>>),
    "include" => TokenWithMetadata(Token::Keyword(Keyword::Include), <TokenMetadata<'input>>),
    "native_include" => TokenWithMetadata(Token::Keyword(Keyword::NativeInclude), <TokenMetadata<'input>>),
    "namespace" => TokenWithMetadata(Token::Keyword(Keyword::Namespace), <TokenMetadata<'input>>),
    "attribute" => TokenWithMetadata(Token::Keyword(Keyword::Attribute), <TokenMetadata<'input>>),
    "table" => TokenWithMetadata(Token::Keyword(Keyword::Table), <TokenMetadata<'input>>),
    "struct" => TokenWithMetadata(Token::Keyword(Keyword::Struct), <TokenMetadata<'input>>),
    "enum" => TokenWithMetadata(Token::Keyword(Keyword::Enum), <TokenMetadata<'input>>),
    "union" => TokenWithMetadata(Token::Keyword(Keyword::Union), <TokenMetadata<'input>>),
    "root_type" => TokenWithMetadata(Token::Keyword(Keyword::RootType), <TokenMetadata<'input>>),
    "rpc_service" => TokenWithMetadata(Token::Keyword(Keyword::RpcService), <TokenMetadata<'input>>),
    "file_extension" => TokenWithMetadata(Token::Keyword(Keyword::FileExtension), <TokenMetadata<'input>>),
    "file_identifier" => TokenWithMetadata(Token::Keyword(Keyword::FileIdentifier), <TokenMetadata<'input>>),
    ident => TokenWithMetadata(Token::Ident(<&'input str>), <TokenMetadata<'input>>),
    string => TokenWithMetadata(Token::StringLiteral(<String>), <TokenMetadata<'input>>),
    int => TokenWithMetadata(Token::IntegerLiteral(<&'input str>), <TokenMetadata<'input>>),
    float => TokenWithMetadata(Token::FloatLiteral(<&'input str>), <TokenMetadata<'input>>),
    end_of_stream => TokenWithMetadata(Token::EndOfStream, <TokenMetadata<'input>>),
  }
}

pub Schema: Schema<'input> =
  <l: @L>
    <declarations: Declaration*>
    <end_of_stream: SimpleToken<end_of_stream>>
  <r: @R> => Schema { span: sp(l, r), declarations, end_of_stream };

Declaration: Declaration<'input> =
  <l: @L> <kind: DeclarationKind> <r: @R> => Declaration { span: sp(l, r), kind };

DeclarationKind: DeclarationKind<'input> = {
  IncludeDeclaration => DeclarationKind::Include(<>),
  NativeIncludeDeclaration => DeclarationKind::NativeInclude(<>),
  NamespaceDeclaration => DeclarationKind::Namespace(<>),
  AttributeDeclaration => DeclarationKind::Attribute(<>),
  TableDeclaration => DeclarationKind::Table(<>),
  StructDeclaration => DeclarationKind::Struct(<>),
  EnumDeclaration => DeclarationKind::Enum(<>),
  UnionDeclaration => DeclarationKind::Union(<>),
  RootTypeDeclaration => DeclarationKind::RootType(<>),
  RpcServiceDeclaration => DeclarationKind::RpcService(<>),
  FileExtensionDeclaration => DeclarationKind::FileExtension(<>),
  FileIdentifierDeclaration => DeclarationKind::FileIdentifier(<>),
  <error_recovery:!> => {
    ctx.emit_parse_error(file_id, &error_recovery.error);
    DeclarationKind::Invalid(error_recovery)
  },
}

IncludeDeclaration: IncludeDeclaration<'input> =
  <keyword: SimpleToken<"include">>
  <path: StringLiteral>
  <semicolon: SimpleToken<";">>
  => IncludeDeclaration { keyword, path, semicolon };

NativeIncludeDeclaration: NativeIncludeDeclaration<'input> =
  <keyword: SimpleToken<"native_include">>
  <path: StringLiteral>
  <semicolon: SimpleToken<";">>
  => NativeIncludeDeclaration { keyword, path, semicolon };

NamespaceDeclaration: NamespaceDeclaration<'input> =
  <keyword: SimpleToken<"namespace">>
  <namespace: NamespacePath>
  <semicolon: SimpleToken<";">>
  => NamespaceDeclaration { keyword, namespace, semicolon };

AttributeDeclaration: AttributeDeclaration<'input> =
  <keyword: SimpleToken<"attribute">>
  <attribute: AttributeKind>
  <semicolon: SimpleToken<";">>
  => AttributeDeclaration { keyword, attribute, semicolon };

AttributeKind: AttributeKind<'input> = {
  <IdentToken> => AttributeKind::Ident(<>),
  <StringLiteral> => AttributeKind::String(<>),
}

TableDeclaration: TableDeclaration<'input> =
  <keyword: SimpleToken<"table">>
  <ident: IdentToken>
  <metadata: Metadata?>
  <start_brace: SimpleToken<"{">>
  <fields: FieldDeclaration*>
  <end_brace: SimpleToken<"}">>
  => TableDeclaration { keyword, ident, metadata, start_brace, fields, end_brace };

StructDeclaration: StructDeclaration<'input> =
  <keyword: SimpleToken<"struct">>
  <ident: IdentToken>
  <metadata: Metadata?>
  <start_brace: SimpleToken<"{">>
  <fields: FieldDeclaration*>
  <end_brace: SimpleToken<"}">>
  => StructDeclaration { keyword, ident, metadata, start_brace, fields, end_brace };

EnumDeclaration: EnumDeclaration<'input> =
  <keyword: SimpleToken<"enum">>
  <ident: IdentToken>
  <type_: (SimpleToken<":"> Type)?>
  <metadata: Metadata?>
  <start_brace: SimpleToken<"{">>
  <declarations: (InitialEnumValDeclaration* FinalEnumValDeclaration)?>
  <end_brace: SimpleToken<"}">>
  => {
    let declarations = if let Some((mut initial_declarations, final_declaration)) = declarations {
      initial_declarations.push(final_declaration);
      initial_declarations
    } else {
      Vec::new()
    };
    EnumDeclaration { keyword, ident, type_, metadata, start_brace, declarations, end_brace }
  };

UnionDeclaration: UnionDeclaration<'input> =
  <keyword: SimpleToken<"union">>
  <ident: IdentToken>
  <metadata: Metadata?>
  <start_brace: SimpleToken<"{">>
  <declarations: (InitialUnionValDeclaration* FinalUnionValDeclaration)?>
  <end_brace: SimpleToken<"}">>
  => {
    let declarations = if let Some((mut initial_declarations, final_declaration)) = declarations {
      initial_declarations.push(final_declaration);
      initial_declarations
    } else {
      Vec::new()
    };
    UnionDeclaration {
      keyword, ident, metadata, start_brace, declarations, end_brace
    }
  };

RootTypeDeclaration: RootTypeDeclaration<'input> =
  <keyword: SimpleToken<"root_type">>
  <root_type: Type>
  <semicolon: SimpleToken<";">>
  => RootTypeDeclaration { keyword, root_type, semicolon };

RpcServiceDeclaration: RpcServiceDeclaration<'input> =
  <keyword: SimpleToken<"rpc_service">>
  <ident: IdentToken>
  <start_brace: SimpleToken<"{">>
  <methods: RpcMethod*>
  <end_brace: SimpleToken<"}">>
  => RpcServiceDeclaration { keyword, ident, start_brace, methods, end_brace };

RpcMethod: RpcMethod<'input> =
  <l: @L>
    <ident: IdentToken>
    <start_paren: SimpleToken<"(">>
    <argument_type: Type>
    <end_paren: SimpleToken<")">>
    <colon: SimpleToken<":">>
    <return_type: Type>
    <metadata: Metadata?>
    <semicolon: SimpleToken<";">>
  <r: @R> => RpcMethod { span: sp(l, r), ident, start_paren, argument_type, end_paren, colon, return_type, metadata, semicolon };

FileExtensionDeclaration: FileExtensionDeclaration<'input> =
  <keyword: SimpleToken<"file_extension">>
  <file_extension: StringLiteral>
  <semicolon: SimpleToken<";">>
  => FileExtensionDeclaration { keyword, file_extension, semicolon };

FileIdentifierDeclaration: FileIdentifierDeclaration<'input> =
  <keyword: SimpleToken<"file_identifier">>
  <file_identifier: StringLiteral>
  <semicolon: SimpleToken<";">>
  => FileIdentifierDeclaration { keyword, file_identifier, semicolon };

Metadata: Metadata<'input> =
  <l: @L>
    <start_paren: SimpleToken<"(">>
    <values: (InitialMetadataValue* FinalMetadataValue)?>
    <end_paren: SimpleToken<")">>
  <r: @R> => {
    let values = if let Some((mut initial_values, final_value)) = values {
      initial_values.push(final_value);
      initial_values
    } else {
      Vec::new()
    };
    Metadata { span: sp(l, r), start_paren, values, end_paren }
  };

FieldDeclaration: FieldDeclaration<'input> =
  <l: @L>
    <ident: IdentToken>
    <colon: SimpleToken<":">>
    <type_: Type>
    <assignment: (SimpleToken<"="> Expr)?>
    <metadata: Metadata?>
    <semicolon: SimpleToken<";">>
  <r: @R> => FieldDeclaration { span: sp(l, r), ident, colon, type_, assignment, metadata, semicolon };

InitialEnumValDeclaration: EnumValDeclaration<'input> =
  <l: @L>
    <ident: IdentToken>
    <assignment: (SimpleToken<"="> Expr)?>
    <comma: SimpleToken<",">>
  <r: @R> => EnumValDeclaration { span: sp(l, r), ident, assignment, comma: Some(comma) };

FinalEnumValDeclaration: EnumValDeclaration<'input> =
  <l: @L>
    <ident: IdentToken>
    <assignment: (SimpleToken<"="> Expr)?>
  <r: @R>
  <comma: SimpleToken<",">?> => EnumValDeclaration { span: sp(l, r), ident, assignment, comma };

InitialUnionValDeclaration: UnionValDeclaration<'input> =
  <l: @L>
    <name: (IdentToken SimpleToken<":">)?>
    <type_: Type>
    <metadata: Metadata?>
    <comma: SimpleToken<",">>
  <r: @R> => UnionValDeclaration { span: sp(l, r), name, type_, comma: Some(comma) };

FinalUnionValDeclaration: UnionValDeclaration<'input> =
  <l: @L>
    <name: (IdentToken SimpleToken<":">)?>
    <type_: Type>
    <metadata: Metadata?>
    <comma: SimpleToken<",">?>
  <r: @R> => UnionValDeclaration { span: sp(l, r), name, type_, comma: comma };

Type: Type<'input> =
  <l: @L> <kind: TypeKind> <r: @R> => Type { span: sp(l, r), kind };

TypeKind: TypeKind<'input> = {
  <VectorType> => TypeKind::Vector(<>),
  <ArrayType> => TypeKind::Array(<>),
  <NamespacePath> => TypeKind::Path(<>),
}

VectorType: VectorType<'input> =
  <l: @L>
    <start_bracket: SimpleToken<"[">>
    <inner_type: Type>
    <end_bracket: SimpleToken<"]">>
  <r: @R> => VectorType { span: sp(l, r), start_bracket, inner_type: Box::new(inner_type), end_bracket };

ArrayType: ArrayType<'input> =
  <l: @L>
    <start_bracket: SimpleToken<"[">>
    <inner_type: Type>
    <colon: SimpleToken<":">>
    <size: Expr>
    <end_bracket: SimpleToken<"]">>
  <r: @R> => ArrayType { span: sp(l, r), start_bracket, inner_type: Box::new(inner_type), colon, size, end_bracket };

Expr: Expr<'input> =
  <l: @L> <kind: ExprKind> <r: @R> => Expr { span: sp(l, r), kind };

ExprKind: ExprKind<'input> = {
  IdentToken => ExprKind::Ident(<>),
  IntegerLiteral => ExprKind::Integer(<>),
  FloatLiteral => ExprKind::Float(<>),
  StringLiteral => ExprKind::String(<>),
  <sign:Sign> <inner:Expr> => ExprKind::Signed { sign, inner: Box::new(inner), },
  ListLiteral => ExprKind::List(<>),
}

Sign: Sign<'input> = {
  <l: @L> <token: SimpleToken<"+">> <r: @R> => Sign { span: sp(l, r), token, is_negative: false, },
  <l: @L> <token: SimpleToken<"-">> <r: @R> => Sign { span: sp(l, r), token, is_negative: true, },
}

IdentToken: IdentToken<'input> =
  <l: @L> <token: ident> <r: @R> => IdentToken { span: sp(l, r), token_metadata: token.1, ident: token.0 };

IntegerLiteral: IntegerLiteral<'input> =
  <l: @L> <token: int> <r: @R> => IntegerLiteral { span: sp(l, r), token_metadata: token.1, value: token.0 };

FloatLiteral: FloatLiteral<'input> =
  <l: @L> <token: float> <r: @R> => FloatLiteral { span: sp(l, r), token_metadata: token.1, value: token.0 };

StringLiteral: StringLiteral<'input> =
  <l: @L> <token: string> <r: @R> => StringLiteral { span: sp(l, r), token_metadata: token.1, value: token.0 };

ListLiteral: ListLiteral<'input> =
  <l: @L>
    <start_bracket: SimpleToken<"[">>
    <values: (InitialListLiteralValue* FinalListLiteralValue)?>
    <end_bracket: SimpleToken<"]">>
  <r: @R> => {
    let values = if let Some((mut initial_values, final_value)) = values {
      initial_values.push(final_value);
      initial_values
    } else {
      Vec::new()
    };
    ListLiteral { span: sp(l, r), start_bracket, values, end_bracket }
  };

InitialListLiteralValue: ListLiteralValue<'input> =
  <l: @L>
    <expr: Expr>
    <comma: SimpleToken<",">>
  <r: @R> => ListLiteralValue { span: sp(l, r), expr, comma: Some(comma) };

FinalListLiteralValue: ListLiteralValue<'input> =
  <l: @L>
    <expr: Expr>
    <comma: SimpleToken<",">?>
  <r: @R> => ListLiteralValue { span: sp(l, r), expr, comma };

InitialMetadataValue: MetadataValue<'input> =
<l: @L>
  <key: IdentToken>
  <assignment: (SimpleToken<":"> Expr)?>
  <comma: SimpleToken<",">>
<r: @R> => MetadataValue { span: sp(l, r), key, assignment, comma: Some(comma) };

FinalMetadataValue: MetadataValue<'input> =
  <l: @L>
    <key: IdentToken>
    <assignment: (SimpleToken<":"> Expr)?>
    <comma: SimpleToken<",">?>
  <r: @R> => MetadataValue { span: sp(l, r), key, assignment, comma: comma };

SimpleToken<Rule>: SimpleToken<'input> =
  <l: @L> <token_metadata: Rule> <r: @R> => SimpleToken { span: sp(l, r), token_metadata };

NamespacePath: NamespacePath<'input> =
  <l: @L>
    <initial_segments: NamespacePathSegment*>
    <final_segment: IdentToken>
  <r: @R> => NamespacePath { span: sp(l, r), initial_segments, final_segment };

NamespacePathSegment: NamespacePathSegment<'input> =
  <l: @L>
    <ident: IdentToken>
    <period: SimpleToken<".">>
  <r: @R> => NamespacePathSegment { span: sp(l, r), ident, period };

